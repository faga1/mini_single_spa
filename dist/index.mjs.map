{"version":3,"sources":["../src/applications/app.helper.ts","../src/applications/apps.ts","../src/lifecycles/load.ts","../src/navigation/reroute.ts","../src/start.ts"],"names":["started"],"mappings":";AAAO,IAAM,aAAa;AAEnB,IAAM,mBAAmB;AAEzB,IAAM,cAAc;AAEpB,IAAM,UAAU;;;ACHvB,IAAM,OAAqB,CAAC;AACrB,SAAS,oBAAoB,SAAiB,SAAkB,YAAuB;AAC1F,QAAM,eAAe;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA,MAAG,KAAK,KAAK,OAAK,EAAE,YAAY,OAAO;AAAG;AAC1C,OAAK,KAAK;AAAA,IACN,QAAQ;AAAA,IACR,GAAG;AAAA,EACP,CAAC;AACD,UAAQ;AACZ;AACO,SAAS,gBAA6C;AACzD,QAAM,eAA6B,CAAC;AACpC,QAAM,gBAA8B,CAAC;AACrC,QAAM,aAA2B,CAAC;AAClC,QAAM,cAA4B,CAAC;AACnC,OAAK,QAAQ,SAAO;AAChB,UAAM,oBAAoB,eAAe,GAAG;AAC5C,YAAQ,IAAI;AAAA,WACH;AACD,mBAAW,KAAK,GAAG;AACnB;AAAA,WAEC;AAAA,WACA;AACD,YAAG,CAAC,mBAAkB;AAClB,uBAAa,KAAK,GAAG;AAAA,QACzB,OAAO;AACH,sBAAY,KAAK,GAAG;AAAA,QACxB;AAAA,WACC;AACD,sBAAc,KAAK,GAAG;AAAA;AAAA,EAElC,CAAC;AACD,SAAO,EAAC,YAAY,aAAa,cAAc,cAAa;AAChE;AACO,SAAS,eAAe,KAAiB;AAC5C,SAAO,IAAI,WAAW,QAAQ;AAClC;;;AC1CA,eAAsB,cAAc,KAAgB;AAChD,MAAI,IAAI,WAAW;AAAY;AAC/B,QAAM,aAAwB,MAAM,IAAI,QAAQ;AAChD,MAAI,SAAS;AACb,MAAI,YAAY,WAAW;AAC3B,MAAI,QAAQ,WAAW;AACvB,MAAI,UAAU,WAAW;AACzB,SAAO;AACX;;;ACNO,SAAS,UAAS;AACrB,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,IAAI,cAAc;AAClB,QAAMA,WAAU,UAAU;AAC1B,MAAG,CAACA,UAAS;AACT,aAAS;AACT,gBAAY,QAAS,SAAO;AAExB,UAAI,UAAU,IAAI,OAAO;AACzB,UAAI,MAAM,IAAI,OAAO;AAAA,IACzB,CAAE;AAAA,EACN;AACA,WAAS,WAAU;AACf,WAAO,QAAQ,QAAQ,EAAE,KAAK,MAAM;AAChC,YAAM,eAAe,WAAW,IAAI,aAAa;AACjD,cAAQ,IAAI,YAAY,EAAE,KAAK,CAAC,WAAS;AACtC,eAAO;AAAA,MACV,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AACA,WAAS,SAAQ;AAAA,EAEjB;AAGJ;;;AC9BA,IAAI,UAAkB;AAEf,SAAS,QAAO;AACnB,YAAU;AAEV,UAAQ;AACZ;AAEO,SAAS,YAAW;AACvB,SAAO;AACX","sourcesContent":["export const NOT_LOADED = 'NOT_LOADED'\n\nexport const NOT_BOOTSTRAPPED = \"NOT_BOOTSTRAPPED\";\n\nexport const NOT_MOUNTED = 'NOT_MOUNTED';\n\nexport const MOUNTED = 'MOUNTED'\n","import type { LoadApp, Application,ActiveWhen } from '../types/application'\nimport { NOT_LOADED, NOT_BOOTSTRAPPED, NOT_MOUNTED, MOUNTED } from './app.helper';\nimport { reroute } from '../navigation/reroute';\nconst apps:Application[] = [];\nexport function registerApplication(appName: string, loadApp: LoadApp, activeWhen: ActiveWhen){\n    const registration = {\n        appName,\n        loadApp,\n        activeWhen\n    }\n    if(apps.find(i => i.appName === appName)) return;\n    apps.push({\n        status: NOT_LOADED,\n        ...registration\n    })\n    reroute();\n}\nexport function getAppChanges():Record<string,Application[]> {\n    const appsToUnLoad:Application[] = [];\n    const appsToUnmount:Application[] = [];\n    const appsToLoad:Application[] = [];\n    const appsToMount:Application[] = [];\n    apps.forEach(app => {\n        const appShouldBeActive = shouldBeActive(app);\n        switch (app.status) {\n            case NOT_LOADED:\n                appsToLoad.push(app)\n                break;\n\n            case NOT_BOOTSTRAPPED:\n            case NOT_MOUNTED:\n                if(!appShouldBeActive){\n                    appsToUnLoad.push(app);\n                } else {\n                    appsToMount.push(app);\n                }\n            case MOUNTED:\n                appsToUnmount.push(app)\n        }\n    })\n    return {appsToLoad, appsToMount, appsToUnLoad, appsToUnmount}\n}\nexport function shouldBeActive(app: Application){\n    return app.activeWhen(location);\n}","import { Application, LifeCycles } from '../types/application';\nimport { NOT_LOADED, NOT_BOOTSTRAPPED } from '../applications/app.helper';\nexport async function toLoadPromise(app:Application){\n    if (app.status !== NOT_LOADED) return;\n    const lifecycles:LifeCycles = await app.loadApp();\n    app.status = NOT_BOOTSTRAPPED;\n    app.bootstrap = lifecycles.bootstrap;\n    app.mount = lifecycles.mount;\n    app.unmount = lifecycles.unmount;\n    return app;\n}","import { getAppChanges } from '../applications/apps';\nimport { toLoadPromise } from '../lifecycles/load';\nimport { isStarted } from '../start';\nimport { getProps } from '../lifecycles/props.helper';\nexport function reroute(){\n    const {\n        appsToLoad,\n        appsToMount,\n        appsToUnLoad,\n        appsToUnmount\n    } = getAppChanges();\n    const started = isStarted();\n    if(!started) {\n        loadApps();\n        appsToMount.forEach((app => {\n            \n            app.bootstrap(app.appName)\n            app.mount(app.appName)\n        }))\n    }\n    function loadApps(){\n        return Promise.resolve().then(() => {\n            const loadPromises = appsToLoad.map(toLoadPromise)\n            Promise.all(loadPromises).then((values)=>{\n               return values;\n            })\n        })\n    }\n    function update(){\n        \n    }\n    \n    \n}","import { reroute } from './navigation/reroute';\n\n// 判断是否启动\nlet started:boolean = false;\n\nexport function start(){\n    started = true;\n    // 启动应用\n    reroute();\n}\n\nexport function isStarted(){\n    return started;\n}"]}