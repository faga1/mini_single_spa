{"version":3,"sources":["../src/applications/app.helper.ts","../src/untils/runtime-env.ts","../src/navigation/navagation-events.ts","../src/applications/apps.ts","../src/lifecycles/load.ts","../src/lifecycles/unload.ts","../src/lifecycles/unmount.ts","../src/lifecycles/bootstrap.ts","../src/lifecycles/mount.ts","../src/navigation/reroute.ts","../src/start.ts"],"names":["started"],"mappings":"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","sourcesContent":["export const NOT_LOADED = 'NOT_LOADED'\n\nexport const NOT_BOOTSTRAPPED = \"NOT_BOOTSTRAPPED\";\n\nexport const BOOTSTRAPPED = \"BOOTSTRAPPED\"\n\nexport const NOT_MOUNTED = 'NOT_MOUNTED';\n\nexport const MOUNTED = 'MOUNTED'\n","export const isInBrowser = typeof window !== \"undefined\";","import { reroute } from './reroute';\nimport { isInBrowser } from '../untils/runtime-env';\nfunction urlReroute(){\n    // maybe need some argument\n    reroute();\n}\nfunction patchUpdateState(updateState:any, methodName:string){\n    return function(){\n        const urlBefore = window.location.href;\n        const result = updateState.apply(this,arguments);\n        const urlAfter = window.location.href;\n        if(urlBefore !== urlAfter) urlReroute();\n    }\n}\nexport function addListeners(){\n    if (isInBrowser) {\n        window.addEventListener(\"hashchange\",urlReroute);\n        window.addEventListener(\"popstate\",urlReroute);\n    }\n    // pushState｜replaceState 并不能触发popstate,因此我们应该重写它们\n    window.history.pushState = patchUpdateState(\n        window.history.pushState,\n        \"pushState\"\n    )\n    window.history.replaceState = patchUpdateState(\n        window.history.replaceState,\n        \"replaceState\"\n    )  \n}\n","import type { LoadApp, Application,ActiveWhen } from '../types/application'\nimport { NOT_LOADED, NOT_BOOTSTRAPPED, NOT_MOUNTED, MOUNTED } from './app.helper';\nimport { reroute } from '../navigation/reroute';\nimport { addListeners } from '../navigation/navagation-events';\nconst apps:Application[] = [];\nexport function registerApplication(appName: string, loadApp: LoadApp, activeWhen: ActiveWhen){\n    const registration = {\n        appName,\n        loadApp,\n        activeWhen\n    }\n    if(apps.find(i => i.appName === appName)) return;\n    apps.push({\n        status: NOT_LOADED,\n        ...registration\n    })\n    reroute();\n    addListeners()\n}\nexport function getAppChanges():Record<string,Application[]> {\n    const appsToUnLoad:Application[] = [];\n    const appsToUnmount:Application[] = [];\n    const appsToLoad:Application[] = [];\n    const appsToMount:Application[] = [];\n    apps.forEach(app => {\n        const appShouldBeActive = shouldBeActive(app);\n        switch (app.status) {\n            case NOT_LOADED:\n                appsToLoad.push(app)\n                break;\n            case NOT_BOOTSTRAPPED:\n            case NOT_MOUNTED:\n                if(!appShouldBeActive){\n                    appsToUnLoad.push(app);\n                } else {\n                    \n                    appsToMount.push(app);\n                }\n                break;\n            case MOUNTED:\n                if (!appShouldBeActive) appsToUnmount.push(app);\n                break;\n        }\n    })\n    return {appsToLoad, appsToMount, appsToUnLoad, appsToUnmount}\n}\nexport function shouldBeActive(app: Application){\n    return app.activeWhen(location);\n}","import { Application, LifeCycles } from '../types/application';\nimport { NOT_LOADED, NOT_BOOTSTRAPPED } from '../applications/app.helper';\nexport async function toLoadPromise(app:Application){\n    if (app.status !== NOT_LOADED) return;\n    const lifecycles:LifeCycles = await app.loadApp();\n    app.status = NOT_BOOTSTRAPPED;\n    app.bootstrap = lifecycles.bootstrap;\n    app.mount = lifecycles.mount;\n    app.unmount = lifecycles.unmount;\n    return app;\n}","import { Application } from '../types/application';\nimport { NOT_MOUNTED } from '../applications/app.helper';\nexport function toUnloadPromise(app:Application){\n    app.status = NOT_MOUNTED\n}\n// function finishUnloadingApp(app:Application){\n//     delete apps\n// }","import { Application } from '../types/application';\nimport { NOT_MOUNTED } from '../applications/app.helper';\nimport * as singleSpa from '../index'\nexport function toUnmountPromise(app:Application){\n    return Promise.resolve().then(()=>{\n        app.status = NOT_MOUNTED;\n        app.unmount({name: app.appName});\n        return app;\n    })\n    \n}","import { Application } from '../types/application';\nimport { BOOTSTRAPPED } from '../applications/app.helper';\nexport function toBootstrapPromise(app:Application){\n    return Promise.resolve().then(()=>{\n        if (app.status!==BOOTSTRAPPED) return app;\n        app.status = BOOTSTRAPPED;\n        return app.bootstrap();\n    })\n    \n}","import { Application } from '../types/application';\nimport { MOUNTED } from '../applications/app.helper';\nexport function tomountPromise(app:Application){\n    return Promise.resolve().then(()=>{\n        app.status = MOUNTED;\n        app.mount({name:app.appName})\n        return app;\n    })\n}","import { getAppChanges, shouldBeActive } from '../applications/apps';\nimport { toLoadPromise } from '../lifecycles/load';\nimport { isStarted } from '../start';\nimport { getProps } from '../lifecycles/props.helper';\nimport { toUnloadPromise } from '../lifecycles/unload';\nimport { toUnmountPromise } from '../lifecycles/unmount';\nimport { Application, appChange } from '../types/application';\nimport { toBootstrapPromise } from '../lifecycles/bootstrap';\nimport { tomountPromise } from '../lifecycles/mount';\nlet appChangeUnderway = false;\nlet peopleWaitingOnAppChange:appChange[] = []\n\nexport function reroute(eventArgument?:any){\n     \n    if (appChangeUnderway) {\n        return peopleWaitingOnAppChange.push({\n                eventArgument\n        })\n    }\n    appChangeUnderway = true;\n    const {\n        appsToLoad,\n        appsToMount,\n        appsToUnLoad,\n        appsToUnmount\n    } = getAppChanges();\n    \n    console.log(appsToLoad,appsToMount,appsToUnLoad,appsToUnmount);\n    \n    \n    const started = isStarted();\n    if(!started) {\n        return loadApps();\n    }\n    return update();\n    async function loadApps(){\n        const loadPromises = Promise.all(appsToLoad.map(toLoadPromise))\n        await loadPromises;\n        \n        finishUpAndReturn();\n        return;\n    }\n    async function update(){\n            appsToUnLoad.map(toUnloadPromise);\n\n            const unmountPromises = appsToUnmount.map(toUnmountPromise);\n            const unmountAllPromises= Promise.all(unmountPromises)\n            // const loadThenMountPromises = appsToLoad.map((app) => {\n            //     return toLoadPromise(app).then(app => {\n            //         if(!app) return;\n            //         return tryToBootstrapAndMount(app,unmountAllPromise)\n            //     })\n            // })\n            \n            const mountPromises = appsToMount.map(async app => {\n                return tryToBootstrapAndMount(app,unmountAllPromises);\n            })\n            await mountPromises;\n            \n            finishUpAndReturn()\n            \n    }\n    async function tryToBootstrapAndMount(app:Application,unmountPromise:Promise<Application[]>){\n        if (shouldBeActive(app)){\n            await toBootstrapPromise(app)\n            await unmountPromise\n            shouldBeActive(app) ? tomountPromise(app):app\n            \n        } else {\n            await unmountPromise;\n            return app;\n        }\n    }\n    function finishUpAndReturn() {\n        appChangeUnderway = false;\n        if(!peopleWaitingOnAppChange.length) return;\n        reroute(peopleWaitingOnAppChange[0].eventArgument);\n        peopleWaitingOnAppChange.shift();\n\n    }\n}","import { reroute } from './navigation/reroute';\n\n// 判断是否启动\nlet started:boolean = false;\n\nexport function start(){\n    started = true;\n    // 启动应用\n    reroute();\n}\n\nexport function isStarted(){\n    return started;\n}"]}